generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Supabase Enable
   directUrl = env("DIRECT_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples")
}

enum Role {
  CASHIER
  ADMIN
}

enum PaymentMethod {
  CASH
  DEBIT
}


model User {
  id       String   @id @default(cuid())
  name     String
  email    String   @unique
  password String
  role     Role @default(CASHIER)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // For soft delete

  // Relations
  shifts Shift[]
  

  @@map("users")
}

model Product {
  id          String    @id @default(cuid())
  name        String
  price       Float
  stock       Int
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime? // For soft delete

  // Relations
  transactionItems TransactionItem[]

  @@map("products")
}

model Shift {
  id         String    @id @default(cuid())
  cashierId  String
  startMoney Float // Initial amount in the cash register
  endMoney   Float? // Final amount in the cash register
  startTime  DateTime
  endTime    DateTime? // Set when shift ends
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  cashier      User          @relation(fields: [cashierId], references: [id])
  transactions Transaction[]

  @@map("shifts")
}

model Transaction {
  id              String        @id @default(cuid())
  shiftId         String
  paymentMethod   PaymentMethod
  debitCardNumber String? // Only for debit payments
  cashAmount      Float? // Only for cash payments
  changeAmount    Float? // Only for cash payments
  totalAmount     Float
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  shift            Shift             @relation(fields: [shiftId], references: [id])
  transactionItems TransactionItem[]

  @@map("transactions")
}

model TransactionItem {
  id            String   @id @default(cuid())
  transactionId String
  productId     String
  quantity      Int
  price         Float // Price at the time of transaction
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  transaction Transaction @relation(fields: [transactionId], references: [id])
  product     Product     @relation(fields: [productId], references: [id])

  @@map("transaction_items")
}
